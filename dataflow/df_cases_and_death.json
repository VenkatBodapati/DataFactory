{
	"name": "df_cases_and_death",
	"properties": {
		"folder": {
			"name": "Covid_19"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_raw_ecdc_csv",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeaths"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_raw_covid_dynamic_csv",
						"type": "DatasetReference"
					},
					"name": "CountryLookUp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_processed_csv",
						"type": "DatasetReference"
					},
					"name": "processedCasesDeaths"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "OnlyEurope"
				},
				{
					"name": "NewWeeklyCount"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          weekly_count as string,",
				"          year_week as string,",
				"          rate_14_day as string,",
				"          cumulative_count as string,",
				"          source as string,",
				"          note as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesAndDeaths",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookUp",
				"OnlyEurope, CountryLookUp join(country_code == country_code_3_digit,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          country = CasesAndDeaths@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit = country_code,",
				"          population = CasesAndDeaths@population,",
				"          indicator,",
				"          weekly_count,",
				"          year_week,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CasesAndDeaths filter(continent == 'Europe') ~> OnlyEurope",
				"select1 derive(NewWeeklyCount = iif(weekly_count == 'NA',0,toInteger(weekly_count))) ~> NewWeeklyCount",
				"NewWeeklyCount derive(cases_count = iif(indicator == 'cases', NewWeeklyCount, 0),",
				"          death_count = iif(indicator == 'deaths', NewWeeklyCount, 0)) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source),",
				"     cases_count = sum(cases_count),",
				"          death_count = sum(death_count)) ~> aggregate1",
				"aggregate1 sort(desc(country, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['cases_deaths.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> processedCasesDeaths"
			]
		}
	}
}