{
	"name": "df_hospital_admissions",
	"properties": {
		"folder": {
			"name": "Covid_19"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_raw_ecdc_csv",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_raw_covid_dynamic_csv",
						"type": "DatasetReference"
					},
					"name": "DateLkp"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_raw_covid_dynamic_csv",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_processed_csv",
						"type": "DatasetReference"
					},
					"name": "DailyFile"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_processed_csv",
						"type": "DatasetReference"
					},
					"name": "WeeklyFile"
				}
			],
			"transformations": [
				{
					"name": "AddYearAndWeekNum"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "split1"
				},
				{
					"name": "select3"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "select4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as short,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissions",
				"source(output(",
				"          date_key as date,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DateLkp",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookup",
				"HospitalAdmissions derive(Year = toInteger(left(year_week,4)),",
				"          WeekNumber = toInteger(substring(year_week,7,length(year_week)))) ~> AddYearAndWeekNum",
				"AddYearAndWeekNum, aggregate1 join(WeekNumber == week_of_year",
				"     && AddYearAndWeekNum@Year == aggregate1@year,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"DateLkp aggregate(groupBy(year,",
				"          week_of_year),",
				"     Week_Start_date = min(date),",
				"          Week_End_date = max(date)) ~> aggregate1",
				"join1, CountryLookup join(HospitalAdmissions@country == CountryLookup@country,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          country = HospitalAdmissions@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          date,",
				"          year_week,",
				"          value,",
				"          source,",
				"          Week_Start_date,",
				"          Week_End_date,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(NewIndicator = substring(indicator,1,(locate(' ',indicator)-1))) ~> derivedColumn1",
				"split1@Daily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_date = date,",
				"          indicator,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 aggregate(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_date,",
				"          source),",
				"     Hospital_occupancy_count = sum(toInteger(iif(indicator == 'Daily hospital occupancy',toInteger(value),0))),",
				"          ICU_occupancy_count = sum(toInteger(iif(indicator == 'Daily ICU occupancy',toInteger(value),0)))) ~> aggregate2",
				"derivedColumn1 split(NewIndicator == 'Daily',",
				"     disjoint: false) ~> split1@(Daily, Weekly)",
				"split1@Weekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_year_week = year_week,",
				"          Reported_Week_Start_date = Week_Start_date,",
				"          Reported_Week_End_date = Week_End_date,",
				"          indicator,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 aggregate(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_year_week,",
				"          Reported_Week_Start_date,",
				"          Reported_Week_End_date,",
				"          source),",
				"     new_hospital_occupancy_count = sum(toInteger(iif(indicator == 'Weekly new hospital admissions per 100k',toInteger(value),0))),",
				"          new_icu_hospital_ccupancy_count = sum(toInteger(iif(indicator == 'Weekly new ICU admissions per 100k',toInteger(value),0)))) ~> aggregate3",
				"aggregate3 select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_year_week,",
				"          Reported_Week_Start_date,",
				"          Reported_Week_End_date,",
				"          new_hospital_occupancy_count,",
				"          new_icu_hospital_ccupancy_count,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Hospital_admission_Daily_file.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DailyFile",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Hospital_admission_Weekly_file.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WeeklyFile"
			]
		}
	}
}